# -*- coding: utf-8 -*-
"""Untitled48.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PTPc_WgtofPs5ZkKEfGgVqTpCdHslCrI
"""

import streamlit as st
from playwright.sync_api import sync_playwright
from huggingface_hub import InferenceClient
import json
import time

# ====== CONFIG ======
HF_API_TOKEN = "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"  # Hugging Face token
MODEL_ID = "gpt2-large"  # You can choose any instruction-following model

client = InferenceClient(HF_API_TOKEN)

st.set_page_config(page_title="AI Agent Browser (HF)", layout="wide")
st.title("üåê AI Agent Browser (Hugging Face)")

prompt = st.text_input("Enter a task for the AI agent:")

if st.button("Run Task") and prompt:
    st.info("Processing your request...")

    # ====== 1Ô∏è‚É£ Generate JSON instructions using Hugging Face ======
    system_message = """
You are an AI that converts user tasks into structured browser automation steps in JSON format.
Allowed actions:
- goto: visit a URL
- click: click an element using CSS selector
- type: type text into an input using CSS selector
- extract: extract text from elements using CSS selector (optional count)
Example output:
[
  {"action": "goto", "url": "https://example.com"},
  {"action": "click", "selector": "#submit-button"},
  {"action": "type", "selector": "#email", "text": "test@example.com"},
  {"action": "extract", "selector": ".title", "count": 5}
]
Only respond with valid JSON.
"""
    # Combine system + user prompt
    full_prompt = f"{system_message}\nUser Task: {prompt}\nJSON Instructions:"

    # Call Hugging Face model
    try:
        result = client.text_generation(model=MODEL_ID, inputs=full_prompt, max_new_tokens=500)
        instructions_str = result[0]["generated_text"].split("JSON Instructions:")[-1].strip()
        st.subheader("üìù Generated Instructions (JSON)")
        st.code(instructions_str, language="json")

        steps = json.loads(instructions_str)
    except Exception as e:
        st.error(f"Failed to generate or parse instructions: {e}")
        steps = []

    # ====== 2Ô∏è‚É£ Execute instructions with Playwright ======
    if steps:
        st.subheader("üöÄ Execution Logs")
        log_area = st.empty()

        with sync_playwright() as p:
            browser = p.chromium.launch(headless=False)  # headless=True for deployment
            page = browser.new_page()

            for i, step in enumerate(steps, start=1):
                action = step.get("action")
                try:
                    if action == "goto":
                        url = step["url"]
                        log_area.text(f"Step {i}: Going to {url}")
                        page.goto(url)
                        time.sleep(2)

                    elif action == "click":
                        selector = step["selector"]
                        log_area.text(f"Step {i}: Clicking {selector}")
                        page.click(selector)
                        time.sleep(1)

                    elif action == "type":
                        selector = step["selector"]
                        text_value = step["text"]
                        log_area.text(f"Step {i}: Typing '{text_value}' into {selector}")
                        page.fill(selector, text_value)
                        time.sleep(1)

                    elif action == "extract":
                        selector = step["selector"]
                        count = step.get("count", 10)
                        log_area.text(f"Step {i}: Extracting text from {selector}")
                        elements = page.query_selector_all(selector)
                        data = [el.inner_text() for el in elements[:count]]
                        st.write(f"‚úÖ Extracted data: {data}")

                    else:
                        log_area.text(f"Step {i}: Unknown action '{action}'")

                except Exception as e:
                    log_area.text(f"Step {i}: Error performing '{action}' - {e}")

            browser.close()
            st.success("‚úÖ Task completed successfully!")